{
#include <boost/lexical_cast.hpp>
using boost::lexical_cast;
#include <string>
#include <map>
#include <stdexcept>
#include <iostream>
using std::cout;
using std::endl;
using std::string;
using std::map;

/*
IDENT : [A-Za-z][A-Za-z0-9]*
{
	CONSTRUCT(b, e) : str(b, e) {}
	
	virtual double toDouble()
	{ throw std::runtime_error("Object is not a double"); }
	
	virtual std::string const& toString()
	{ return str; }
	
	virtual std::list<TokenBase*> const& toList()
	{ throw std::runtime_error("Object is not a list"); }
	
	virtual TokenBase::Type::type type() { return TokenBase::Type::String; }
	
	std::string str;
} ;

NEWLINE : [\r\n]* ;

event<> = ON IDENT<name> LPARAN [parameters] RPARAN NEWLINE action* ;
*/

#define D(x) (cout << x << std::endl)
}

% tokenbase { TokenBase } ;
% token {
	Token(T& g_) : TokenBase(g_.getLoc()), g(g_) {}
	
	T& g;
} ;

% alias any { [\000-\377] } ;
% namespace OmfgScript ;

TRUE : "true" ;
FALSE : "false" ;
ON : "on" ;
EQUAL : "=" ;
LPARAN : "(" ;
RPARAN : ")" ;
LBRACKET : "[" ;
RBRACKET : "]" ;
LBRACE : "{" ;
RBRACE : "}" ;
COMMA : "," ;
PLUS : "+" ;
MINUS : "-" ;
STAR : "*" ;
SLASH : "/" ;

STRING : [A-Za-z_][A-Za-z0-9.\-/_]* {
	CONSTRUCT(b, e) : Token(g), str(b, e) { }

	virtual std::string const& toString()
	{ return str; }
	
	virtual TokenBase::Type::type type() { return TokenBase::Type::String; }
	
	virtual std::ostream& output(std::ostream& s) { s << str; return s; }
	
	std::string str;
} ;

INTEGER : ("-")?[0-9]+ {
	CONSTRUCT(b, e) : Token(g) { v = lexical_cast<int>(std::string(b, e)); }
	
	INTEGER(T& g, int i) : Token(g), v(i) {}
	
	virtual double toDouble()
	{ return v; }
	
	virtual int toInt()
	{ return v; }
	
	virtual TokenBase::Type::type type() { return TokenBase::Type::Int; }
	
	virtual std::ostream& output(std::ostream& s) { s << v; return s; }
	
	int v;
} ;

NUMBER : ("-")?[0-9]+"."[0-9]* {
	CONSTRUCT(b, e) : Token(g) { v = lexical_cast<double>(std::string(b, e)); }
	
	virtual double toDouble()
	{ return v; }
	
	virtual int toInt()
	{
		this->g.semanticWarning("Number converted to integer may lose precision", this->loc);
		return static_cast<int>(v);
	}
	
	virtual TokenBase::Type::type type() { return TokenBase::Type::Double; }
	
	virtual std::ostream& output(std::ostream& s) { s << v; return s; }
	
	double v;
} ;

SKIP : [\ \r] = @skip ;
COMMENT : "#"[^\n]* = @skip ;
LINE : "\n" = @linecounter @skip ;
QUOTESTRING : [\"][^\"]*[\"] = STRING<b + 1, e - 1> ;

leaf<TokenBase::ptr& a> = (
	| TRUE $( a.reset(new INTEGER(*self, 1)); )
	| FALSE $( a.reset(new INTEGER(*self, 0)); )
	| STRING<x> (
		$( auto_ptr<Func> l(new Func(self->getLoc(), x->str)); TokenBase::ptr el; )
		LPARAN (
			leaf<el> $( l->add(el); )
			( COMMA leaf<el> $( l->add(el); ) )*
		) RPARAN
		$( a = l; )
		
		| $( a = x; )
	)
	| INTEGER<=a>
	| NUMBER<=a>
	| $( auto_ptr<List> l(new List(self->getLoc())); TokenBase::ptr el; )
		LBRACKET (
			expr<el> $( l->add(el); )
			( COMMA expr<el> $( l->add(el); ) )*
		) RBRACKET
	  $( a = l; )
	| LPARAN expr<a> RPARAN
	) ;

term<TokenBase::ptr& a> = ( $( int t; TokenBase::ptr b; )
	@location termLoc
	leaf<a>
	(
		(
		| STAR $( t = 0; )
		| SLASH $( t = 1; )
		)
		
		leaf<b>
		$(
			switch(t)
			{
				case 0: a.reset( new Mul(termLoc, a.release(), b.release()) ); break;
				case 1: a.reset( new Div(termLoc, a.release(), b.release()) ); break;
			}
		)
	)*
) ;
	
expr<TokenBase::ptr& a> = ( $( int t; TokenBase::ptr b; )
	@location exprLoc
	term<a>
	(
		(
		| PLUS $( t = 0; )
		| MINUS $( t = 1; )
		)
		
		term<b>
		$(
			switch(t)
			{
				case 0: a.reset( new Add(exprLoc, a.release(), b.release()) ); break;
				case 1: a.reset( new Sub(exprLoc, a.release(), b.release()) ); break;
			}
		)
	)*
) ;
	   
prop<std::string const& prefix = ""> = $( TokenBase::ptr v; )
	@location propLoc
	STRING<name>
		(
		| EQUAL expr<v> $( self->property(prefix + name->str, v.release(), propLoc); )
		| LBRACE
			(prop<(*name).str + "_">)*
		  RBRACE
		) ;

parameter<Parameters& params> = $( TokenBase::ptr v; )
	@location paramLoc
	( 
	| STRING<name>
		(
		| EQUAL expr<v> $( params.addParam(name->str, v, paramLoc); )
		| $( params.addParam(TokenBase::ptr(name), paramLoc); )
		)
	| expr<v> $( params.addParam(v, paramLoc); )
	) ;
	
parameters<Parameters& params> = parameter<params> (COMMA parameter<params>)* ;

action<std::vector<BaseAction*>& actions> =
	STRING<name>
	$(
		ActionDef* action(self->getAction(name->str));
		if(!action)
		{
	)
			@skipafter RPARAN
	$(
		}
		else
		{
			auto_ptr<Parameters> param(new Parameters(action->paramDef, self->getLoc()));
	)
	
	LPARAN [parameters<*param>] RPARAN
	$(
			param->checkParams();
			if(param->flags & Parameters::Error)
				semanticError("Malformed parameters", param->loc);
			else
				actions.push_back(self->createAction(action, param));
		}
	)
	;
	
event<> = ON STRING<name>
	$(
		EventDef* event(self->getEventDef(name->str));
		if(!event)
		{
	)
			@skipto ON
	$(
		}
		else
		{
			auto_ptr<Parameters> param(new Parameters(event->paramDef, self->getLoc()));
	)
	
	LPARAN [parameters<*param>] RPARAN
	$( std::vector<BaseAction*> actions; )
	action<actions>*
	$(
			param->checkParams();
			if(param->flags & Parameters::Error)
				semanticError("Malformed parameters", param->loc);
			else
				self->addEvent(event, param, actions);
		}
	) ;

lines<> = prop* event*;
